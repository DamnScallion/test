# created at 2018-05-11
# updated at 2018-05-14
# By TimeStamp
# cnblogs: http://www.cnblogs.com/AdaminXie

import dlib         # 人脸识别的库dlib
import numpy as np  # 数据处理的库numpy
import cv2          # 图像处理的库OpenCv
import csv
import time
from numba import jit

# face recognition model, the object maps human faces into 128D vectors
#人脸识别模型，对象将人脸映射到128D矢量
facerec = dlib.face_recognition_model_v1("dlib_face_recognition_resnet_model_v1.dat")#残差网络

# dist = np.sqrt(np.sum(np.square(feature_1 - feature_2)))#欧式距离的思想了：差的平方求和再开方，计算量有点大


# 计算两个向量间的欧式距离，此函数时间耗费基本可以忽略不计

@jit
def return_euclidean_distance(feature_1, feature_2):
    start = time.clock()
    feature_1 = np.array(feature_1)#将输入数据转化为一个ndarray数组,features_1对应的是传进来的视频中的实时数据
    feature_2 = np.array(feature_2)#将输入数据转化为一个ndarray数组，features_2对应的是传进来的前面已经计算好的特征均值，时间耗费0.0003s
    elapsed = (time.clock() - start)
    print("Calcuate features:")
    print("Time used:", elapsed)

    dist = np.sqrt(np.sum(np.square(feature_1 - feature_2)))  # 欧式距离的思想了：差的平方求和再开方，计算量有点大,但是时间耗费却不大，大约是0.00002s的时间
    print(dist)
    if dist > 0.4:
        print("识别成功")
        return "strangers"
    else:
        print("识别失败")
        return "friends"
#用get_feature_into_CSV中的compute_the_mean(path_csv_rd)计算出的均值赋给features_mean_default_person
features_mean_default_person = [-0.1465115352318837, 0.11559124921376888, 0.065115759220833958, -0.0026171431124496908, -0.094552236680801094, -0.025022395313359223, -0.077516769560483784, -0.10416573142776123, 0.12935091153933451, -0.04590489364300783, 0.23465687265762916, -0.061340387624043688, -0.20839819312095642, -0.056528427924674288, -0.01190641880608522, 0.16179382113310006, -0.21641624432343703, -0.10428296745969699, -0.0033451446976799225, -0.080953248704855263, 0.080047936107103645, -0.002679231773632077, 0.01687256447845497, 0.09824502210204418, -0.10097290231631352, -0.30620999290392947, -0.092477140518335194, -0.15716846688435629, 0.045593998753107511, -0.090642467427712217, -0.065496137079138025, -0.0090529208895392139, -0.16776003287388727, -0.01142754491705161, -0.0045373176152889542, 0.056369726044627338, 0.033870849830026813, -0.077546892830958739, 0.16665866111333555, -0.042660441321249194, -0.16831585306387681, -0.0062131310741488747, 0.022448765113949776, 0.1981047265804731, 0.19726957495395953, 0.03751584973472815, 0.012629169325989027, -0.088686158450750202, 0.078841067850589752, -0.1441203854404963, 0.061337497945015244, 0.14256129069970205, 0.11547686216922906, 0.037060671127759494, -0.063744371398710281, -0.20055749897773451, -0.035058904295930497, 0.10662866899600396, -0.16541717831905073, 0.027919804838557657, 0.057279160676094204, -0.13132004267894304, -0.038196888179160081, -0.034149598151158825, 0.29115507121269518, 0.17262696417478415, -0.1233675628900528, -0.16042057482095864, 0.15452451373522097, -0.12521336342279726, -0.062533510992160216, 0.034000989264593676, -0.16673632997732896, -0.147093853698327, -0.26204538001463962, 0.042689455744738765, 0.42190844737566435, 0.038767551859984033, -0.22256121727136466, 0.034968195912929684, -0.12713473189908725, 0.0033134726377633903, 0.058970404287370354, 0.15668978255528671, -0.055000685441952482, -0.020284802867816046, -0.099900739124188051, 0.017987499586664714, 0.19351731699246627, -0.055773668564282931, -0.026468812667119961, 0.17585486402878395, -0.022957782404353984, 0.069724704783696398, 0.034062123642517969, 0.014501275745435404, -0.045297787094918579, -0.0028165469949062052, -0.063734277223165214, -0.030851773595294125, -0.01735763058352929, -0.051068243498985581, -0.027696081007329319, 0.083475504930202782, -0.18106271441166216, 0.095408451958344534, 0.039718626568523735, -0.015085726116712276, -0.019838348174324401, -0.013494239940952796, -0.062469010026409075, -0.040134328059279002, 0.18032840696664956, -0.24980598115004027, 0.23819852906924027, 0.15578585805801246, 0.076206705604608238, 0.19948222774725693, 0.048665900786335654, 0.13311120925041345, -0.0043227805827672659, -0.044186780372491248, -0.17913567847930467, 0.019641948369098827, 0.10406500129745556, -0.041539892052801758, 0.085709926600639641, 0.041838088717598185]

# dlib预测器
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor('shape_predictor_68_face_landmarks.dat')#shape_predictor_68_face_landmarks.dat是已经训练好的人脸关键点检测器

# 创建cv2摄像头对象
cap = cv2.VideoCapture(0)

# cap.set(propId, value)
# 设置视频参数，propId设置的视频参数，value设置的参数值
cap.set(3, 480)

# 返回单张图像的128D特征
def get_128d_features(img_gray):#img_gray为传进来的参数，img_gray实际为系统当前截取一帧的图像
    start = time.clock()
    dets = detector(img_gray, 1)#dets为识别出的人脸位置，例如，测试可知，dets=rectangles[[(191, 217) (414, 440)]]（不唯一，仅供参考），时间耗费大概在0.2s
    elapsed = (time.clock() - start)
    print("Calcuate dets:")
    print("Time used:", elapsed)
    if len(dets) != 0:
        shape = predictor(img_gray, dets[0])#时间耗费大概在0.002s，即2ms左右
        face_descriptor = facerec.compute_face_descriptor(img_gray, shape)#时间耗费最大，0.5s以上
        #face_descriptor = [-0.1465115352318837, 0.11559124921376888, 0.065115759220833958, -0.0026171431124496908, -0.094552236680801094, -0.025022395313359223, -0.077516769560483784, -0.10416573142776123, 0.12935091153933451, -0.04590489364300783, 0.23465687265762916, -0.061340387624043688, -0.20839819312095642, -0.056528427924674288, -0.01190641880608522, 0.16179382113310006, -0.21641624432343703, -0.10428296745969699, -0.0033451446976799225, -0.080953248704855263, 0.080047936107103645, -0.002679231773632077, 0.01687256447845497, 0.09824502210204418, -0.10097290231631352, -0.30620999290392947, -0.092477140518335194, -0.15716846688435629, 0.045593998753107511, -0.090642467427712217, -0.065496137079138025, -0.0090529208895392139, -0.16776003287388727, -0.01142754491705161, -0.0045373176152889542, 0.056369726044627338, 0.033870849830026813, -0.077546892830958739, 0.16665866111333555, -0.042660441321249194, -0.16831585306387681, -0.0062131310741488747, 0.022448765113949776, 0.1981047265804731, 0.19726957495395953, 0.03751584973472815, 0.012629169325989027, -0.088686158450750202, 0.078841067850589752, -0.1441203854404963, 0.061337497945015244, 0.14256129069970205, 0.11547686216922906, 0.037060671127759494, -0.063744371398710281, -0.20055749897773451, -0.035058904295930497, 0.10662866899600396, -0.16541717831905073, 0.027919804838557657, 0.057279160676094204, -0.13132004267894304, -0.038196888179160081, -0.034149598151158825, 0.29115507121269518, 0.17262696417478415, -0.1233675628900528, -0.16042057482095864, 0.15452451373522097, -0.12521336342279726, -0.062533510992160216, 0.034000989264593676, -0.16673632997732896, -0.147093853698327, -0.26204538001463962, 0.042689455744738765, 0.42190844737566435, 0.038767551859984033, -0.22256121727136466, 0.034968195912929684, -0.12713473189908725, 0.0033134726377633903, 0.058970404287370354, 0.15668978255528671, -0.055000685441952482, -0.020284802867816046, -0.099900739124188051, 0.017987499586664714, 0.19351731699246627, -0.055773668564282931, -0.026468812667119961, 0.17585486402878395, -0.022957782404353984, 0.069724704783696398, 0.034062123642517969, 0.014501275745435404, -0.045297787094918579, -0.0028165469949062052, -0.063734277223165214, -0.030851773595294125, -0.01735763058352929, -0.051068243498985581, -0.027696081007329319, 0.083475504930202782, -0.18106271441166216, 0.095408451958344534, 0.039718626568523735, -0.015085726116712276, -0.019838348174324401, -0.013494239940952796, -0.062469010026409075, -0.040134328059279002, 0.18032840696664956, -0.24980598115004027, 0.23819852906924027, 0.15578585805801246, 0.076206705604608238, 0.19948222774725693, 0.048665900786335654, 0.13311120925041345, -0.0043227805827672659, -0.044186780372491248, -0.17913567847930467, 0.019641948369098827, 0.10406500129745556, -0.041539892052801758, 0.085709926600639641, 0.041838088717598185]

    else:
        face_descriptor = 0
    return face_descriptor

# cap.isOpened（） 返回true/false 检查初始化是否成功
while cap.isOpened():

    # cap.read()
    # 返回两个值：
    #    一个布尔值true/false，用来判断读取视频是否成功/是否到视频末尾
    #    图像对象，图像的三维矩阵
    # flag的值为True或者False，代表有没有读到图片，im_rd代表当前截取的一帧的图片
    flag, im_rd = cap.read()

    # 每帧数据延时1ms，延时为0读取的是静态帧
    kk = cv2.waitKey(1)

    # 将当前截取的彩色图像转化为灰度
    img_gray = cv2.cvtColor(im_rd, cv2.COLOR_RGB2GRAY)

    # 人脸数dets
    dets = detector(img_gray, 0)

    # 待会要写的字体
    font = cv2.FONT_HERSHEY_SIMPLEX
    cv2.putText(im_rd, "q: quit", (20, 400), font, 0.8, (84, 255, 159), 1, cv2.LINE_AA)

    if len(dets) != 0:
        print("\n")

        features_rd = get_128d_features(im_rd)#时间耗费大概在0.18s到0.19s
        ###########################
        compare = return_euclidean_distance(features_rd, features_mean_default_person)

        # 无切要
        # 让人名跟随在矩形框的下方
        # 确定人名的位置坐标
        pos_text_1 = tuple([dets[0].left(), int(dets[0].bottom() + (dets[0].bottom() - dets[0].top()) / 4)])
        im_rd = cv2.putText(im_rd, compare.replace("same", "default_person"), pos_text_1, font, 0.8, (0, 255, 255), 1,
                            cv2.LINE_AA)

        # 矩形框
        for k, d in enumerate(dets):
            # 绘制矩形框
            im_rd = cv2.rectangle(im_rd, tuple([d.left(), d.top()]), tuple([d.right(), d.bottom()]), (0, 255, 255), 2)

        cv2.putText(im_rd, "faces: " + str(len(dets)), (20, 50), font, 1, (0, 0, 255), 1, cv2.LINE_AA)


    else:
        # 没有检测到人脸
        cv2.putText(im_rd, "no face", (20, 50), font, 1, (0, 0, 255), 1, cv2.LINE_AA)

    # 按下q键退出
    if kk == ord('q'):
        break

    # 窗口显示
    cv2.imshow("camera", im_rd)

# 释放摄像头
cap.release()

# 删除建立的窗口
cv2.destroyAllWindows()
