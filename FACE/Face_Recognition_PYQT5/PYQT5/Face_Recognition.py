import sys
import cv2
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (QWidget, QMessageBox, QLabel, QDialog,
    QApplication, QPushButton, QDesktopWidget, QLineEdit, QTabWidget)
from PyQt5.QtGui import QIcon, QPixmap, QImage, QPalette, QBrush
from PyQt5.QtCore import Qt, QTimer
import numpy as np
import os
import pickle
import csv
#from get_faces_from_camera import *
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

class Recognition(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()
    def initUI(self):
        self.label = QLabel(self)
        self.label.setFixedWidth(300)
        self.label.setFixedHeight(300)
        self.label.move(20, 20)
        self.pixMap = QPixmap("Face_Recognition.jpg").scaled(self.label.width(), self.label.height())
        self.label.setPixmap(self.pixMap)
        self.label.show()

        self.startButton = QPushButton('start', self)
        self.startButton.move(400, 150)
        self.capPictureButton = QPushButton('capPicture', self)
        self.capPictureButton.move(400, 250)

        self.startButton.clicked.connect(self.start)
        self.capPictureButton.clicked.connect(self.cap)

        self.timer = QTimer()
        self.timer.start()
        self.timer.setInterval(100)

    def start(self, event):
        self.cap = cv2.VideoCapture(0)
        #self.cv2.imshow()
        self.timer.timeout.connect(self.capPicture)

    def read_csv(self):
        # 读取csv文件方式1
        csvFile = open("ordinary.csv", "r")
        reader = csv.reader(csvFile)  # 返回的是迭代类型
        data = []
        for item in reader:
            print(item)
            data.append(item)
        #print(data)
        #csvFile.close()

    def cap(self,event):
        print("weiweiwiewieiwiewieuiwueiwue")
        global ALLFEATURE, NEWFEATURE, tempUsrName, ALLUSER, USRNAME
        self.cap.release()
        feature1 = [-0.12575136497616768, 0.1454719565808773, 0.099538849666714668, 0.018881005933508277, -0.079140466637909412, -0.055538424290716648, -0.081507822498679161, -0.0764947310090065, 0.1329679824411869, -0.0077104899100959301, 0.25929683074355125, -0.062539785169064999, -0.19771355763077736, -0.075952625833451748, 0.061407092493027449, 0.13559487834572792, -0.21158945932984352, -0.0838274285197258, 0.010756576666608453, -0.06758530531078577, 0.077134628780186176, -0.019668716005980968, 0.03696646960452199, 0.092967439442873001, -0.10323133319616318, -0.31137264519929886, -0.10602383688092232, -0.16787348315119743, 0.067081467248499393, -0.11570725776255131, -0.049401072785258293, -0.0098649369028862566, -0.19739320501685143, -0.0064122634939849377, -0.043992816936224699, 0.015599307138472795, 0.081636741757392883, -0.055224118754267693, 0.1784183457493782, -0.05335468053817749, -0.16768425330519676, 0.0017052507027983657, -0.022161532426252958, 0.18112185597419739, 0.20028847828507423, 0.022417474538087845, 0.032279167557135224, -0.055115398019552231, 0.047470591031014919, -0.12504789978265762, 0.048037685453891754, 0.15519532561302185, 0.11320397444069386, 0.0047919071512296805, -0.10695639811456203, -0.18493374437093735, -0.051489515230059624, 0.052598416339606047, -0.19586740434169769, 0.032647465821355581, 0.097496287897229195, -0.1094819400459528, -0.074042253196239471, -0.015732079627923667, 0.29918704926967621, 0.15763065963983536, -0.13672355189919472, -0.18794957175850868, 0.097604110836982727, -0.13916285336017609, -0.03845868306234479, 0.083798285573720932, -0.18609852716326714, -0.13380848243832588, -0.29924974590539932, 0.052352127153426409, 0.4069051593542099, -0.016533548245206475, -0.24109981581568718, 0.030200055567547679, -0.18721262738108635, 0.0025961023056879631, 0.02489889576099813, 0.12062568590044975, -0.053961924742907286, 0.003330436535179615, -0.12654886208474636, 0.056727971881628036, 0.1994236595928669, -0.062900099903345108, -0.023545836913399398, 0.1850401796400547, -0.015510182594880462, 0.087455030530691147, -0.014483933104202151, 0.029980473220348358, 0.012146069668233395, -0.034289888106286526, -0.03730856254696846, 0.011936529423110187, -0.015162588795647027, -0.042288939468562603, -0.062570313923060894, 0.078694740310311317, -0.21578546985983849, 0.10321724973618984, 0.058824438601732254, -0.02180119464173913, -0.041073378175497055, -0.0073575157439336172, -0.096605202183127403, -0.044942575506865978, 0.19793901219964027, -0.2791130542755127, 0.22312450781464574, 0.16594772413372993, 0.072951710782945156, 0.15549261495471001, 0.018852217821404338, 0.12918463535606861, -0.033885709941387177, -0.047656056471168995, -0.16399197280406952, 0.029199505690485239, 0.08713136799633503, -0.049102975055575371, 0.08238350972533226, 0.042585698887705803]
        feature2 = [-0.061761224642395973, 0.18372058495879173, 0.039373369887471199, 0.026657626731321216, -0.081657986156642437, -0.036855608923360705, -0.052182723768055439, -0.097728259861469269, 0.12878780253231525, -0.091207493096590042, 0.28508282080292702, -0.08016359806060791, -0.24157653003931046, -0.12703582271933556, 0.025568838696926832, 0.16500693559646606, -0.21293653547763824, -0.11458823084831238, -0.020579812349751592, 0.024995831307023764, 0.076371289789676666, 0.027095031808130443, 0.052026393823325634, -0.00074601813685149258, -0.034519079606980085, -0.39727558195590973, -0.073819362558424473, -0.10091505758464336, 0.046605918556451797, -0.088865805417299271, 0.0012635336024686694, 0.089151859283447266, -0.1250380165874958, -0.064016871154308319, 0.049468165263533592, 0.052544588688760996, -0.068649373948574066, 0.015230138320475817, 0.18701950460672379, -0.022183266002684832, -0.21397605538368225, 0.010280878748744726, 0.014618977438658476, 0.29781310260295868, 0.21925479918718338, 0.10375853627920151, -0.031655110418796539, -0.12887648865580559, 0.063477842137217522, -0.1755722314119339, 0.066976862028241158, 0.1350800096988678, 0.12026648409664631, 0.10256547667086124, 0.041378927882760763, -0.15605318918824196, 0.02905710251070559, 0.082802815362811089, -0.22084395214915276, 0.0020056311041116723, 0.099911466240882874, -0.13902168162167072, 0.018196496646851301, -0.063012543134391308, 0.31171736121177673, 0.077090773731470108, -0.10416321270167828, -0.14631931111216545, 0.13989205658435822, -0.13837011717259884, -0.10849282145500183, 0.11278116516768932, -0.12866609543561935, -0.15412166714668274, -0.2854711040854454, -0.0029384598601609468, 0.3612603172659874, 0.10319899022579193, -0.17950354889035225, -0.014874077867716547, -0.0025047495146282013, -0.018805785570293665, 0.11607127077877522, 0.16323303803801537, -0.044270041398704052, -0.072175648063421249, -0.068006494082510471, -0.04291817219927907, 0.14778924360871315, -0.058159572072327137, -0.10791196301579475, 0.20696990564465523, -0.03719114838168025, 0.081511329859495163, 0.04848065972328186, -0.05398328322917223, -0.00094748032279312697, 0.025130489375442266, -0.14412744343280792, -0.066313914023339748, -0.035470243543386459, -0.099188335239887238, -0.039068538695573807, 0.10238901525735855, -0.13217576593160629, 0.1270281970500946, 0.011231176322326064, 0.07343747466802597, 0.025889478158205748, -0.001216841163113715, -0.061660648323595524, -0.018285101046785712, 0.14538418129086494, -0.31858853995800018, 0.29957350343465805, 0.1556939035654068, 0.08229583315551281, 0.13927878066897392, 0.047310907393693924, 0.10270264558494091, -0.030266257468611002, -0.074963552877306938, -0.21550324931740761, -0.018388973549008369, 0.10630667209625244, -0.0099126403219997883, 0.10378761030733585, 0.0084660373395308852]
        dist = np.sqrt(np.sum(np.square(feature1 - feature2)))  # 欧式距离的思想了：差的平方求和再开方，计算量有点大,但是时间耗费却不大，大约是0.00002s的时间
        print(dist)
        if dist > 0.4:
            print("识别成功")

        else:
            print("识别失败")




            #cal_feature(self.face)
        #np.save('usrfeature.npy', ALLFEATURE)
        #sim = cal_cos(feature,np.array(ALLFEATURE))
        #m = np.argmax(sim)
        #if max(sim)>0.9:
            #print(sim, USRNAME)
            #QMessageBox.information(self,"Information","Welcome," + USRNAME[m])
        #else:
            #QMessageBox.information(self,"Information","识别失败!")
        self.label.setPixmap(self.pixMap)

    def capPicture(self):

        if (self.cap.isOpened()):
            # get a frame
            ret, img = self.cap.read()

            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            faces = face_cascade.detectMultiScale(gray, 1.3, 5)
            for (x, y, w, h) in faces:
                img = cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)
                roi_gray = gray[y:y + h, x:x + w]
                roi_color = img[y:y + h, x:x + w]
                self.face = cv2.resize(img[y:y + h, x:x + w], (300, 300), interpolation=cv2.INTER_CUBIC)
            height, width, bytesPerComponent = img.shape
            bytesPerLine = bytesPerComponent * width
            # 变换彩色空间顺序
            cv2.cvtColor(img, cv2.COLOR_BGR2RGB, img)
            # 转为QImage对象
            self.image = QImage(img.data, width, height, bytesPerLine, QImage.Format_RGB888)
            self.label.setPixmap(QPixmap.fromImage(self.image).scaled(self.label.width(), self.label.height()))#在标签上面贴东西